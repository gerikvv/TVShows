// ------------------------------------------------------------------------------
//  <auto-generated>
//      Этот код был создан построителем кодированных тестов ИП.
//      Версия: 11.0.0.0
//
//      Изменения, внесенные в этот файл, могут привести к неправильной работе кода и будут
//      утрачены при повторном формировании кода.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TVSwows.Tests.UI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AdminLoginTest - Используйте "AdminLoginTestParams" для передачи параметров в этот метод.
        /// </summary>
        public void AdminLoginTest()
        {
            #region Variable Declarations
            WpfButton uIВходButton = this.UISmonitoringWindow.UICapCustom.UIВходButton;
            WpfEdit uITbLoginEdit = this.UISmonitoringWindow.UITVShowControlCustom.UIUserControlCustom.UITbLoginEdit;
            WpfEdit uIPasswordEdit = this.UISmonitoringWindow.UITVShowControlCustom.UIUserControlCustom.UIPasswordEdit;
            WpfButton uIВойтиButton = this.UISmonitoringWindow.UITVShowControlCustom.UIUserControlCustom.UIВойтиButton;
            #endregion

            // Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
            ApplicationUnderTest uISmonitoringWindow = ApplicationUnderTest.Launch(this.AdminLoginTestParams.UISmonitoringWindowExePath, this.AdminLoginTestParams.UISmonitoringWindowAlternateExePath);

            // Щелкните "Вход" кнопка
            Mouse.Click(uIВходButton, new Point(24, 4));

            // Тип "a" в "TbLogin" надпись
            uITbLoginEdit.Text = this.AdminLoginTestParams.UITbLoginEditText;

            // Щелкните "Password" надпись
            Mouse.Click(uIPasswordEdit, new Point(57, 8));

            // Тип "********" в "Password" надпись
            Keyboard.SendKeys(uIPasswordEdit, this.AdminLoginTestParams.UIPasswordEditSendKeys, true);

            // Щелкните "Войти" кнопка
            Mouse.Click(uIВойтиButton, new Point(85, 18));
        }
        
        /// <summary>
        /// AssertIsDisabledBtnFavorites - Используйте "AssertIsDisabledBtnFavoritesExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertIsDisabledBtnFavorites()
        {
            #region Variable Declarations
            WpfButton uIИзбранноеButton = this.UISmonitoringWindow.UICapCustom.UIИзбранноеButton;
            #endregion

            // Убедитесь, что свойство Enabled "Избранное" кнопка равняется "False"
            Assert.AreEqual(this.AssertIsDisabledBtnFavoritesExpectedValues.UIИзбранноеButtonEnabled, uIИзбранноеButton.Enabled, "Should be \'False\'! ");
        }
        
        /// <summary>
        /// AssertIsEnabledBtnFavorites - Используйте "AssertIsEnabledBtnFavoritesExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertIsEnabledBtnFavorites()
        {
            #region Variable Declarations
            WpfButton uIИзбранноеButton = this.UISmonitoringWindow.UICapCustom.UIИзбранноеButton;
            #endregion

            // Убедитесь, что свойство Enabled "Избранное" кнопка равняется "True"
            Assert.AreEqual(this.AssertIsEnabledBtnFavoritesExpectedValues.UIИзбранноеButtonEnabled, uIИзбранноеButton.Enabled, "Should be \'True\'!");
        }
        
        /// <summary>
        /// AssertNameTVShow_Equal - Используйте "AssertNameTVShow_EqualExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertNameTVShow_Equal()
        {
            #region Variable Declarations
            WpfText uIУкрощениестроптивогоText = this.UISmonitoringWindow.UIPageTransitionControCustom.UIUserControlCustom.UIУкрощениестроптивогоText;
            #endregion

            // Подождите 1 сек. для задержки между действиями пользователя; Убедитесь, что свойство DisplayText "Укрощение строптивого" надпись равняется "Побег из Шоушенка"
            Playback.Wait(500);
            Assert.AreEqual(this.AssertNameTVShow_EqualExpectedValues.UIУкрощениестроптивогоTextDisplayText, uIУкрощениестроптивогоText.DisplayText, "Should be \'Побег из Шоушенка\'!");
        }
        
        /// <summary>
        /// AssertTextBox_Equal_Admin - Используйте "AssertTextBox_Equal_AdminExpectedValues" для передачи параметров в этот метод.
        /// </summary>
        public void AssertTextBox_Equal_Admin()
        {
            #region Variable Declarations
            WpfText uIADMINaText = this.UISmonitoringWindow.UICapCustom.UIADMINaText;
            #endregion

            // Убедитесь, что свойство DisplayText "ADMIN: a" надпись равняется "ADMIN: a"
            Assert.AreEqual(this.AssertTextBox_Equal_AdminExpectedValues.UIADMINaTextDisplayText, uIADMINaText.DisplayText, "Should be \"ADMIN: a\"");
        }
        
        /// <summary>
        /// FoundTVShow - Используйте "FoundTVShowParams" для передачи параметров в этот метод.
        /// </summary>
        public void FoundTVShow()
        {
            #region Variable Declarations
            WpfEdit uITbSearchEdit = this.UISmonitoringWindow.UICapCustom.UITbSearchEdit;
            WpfButton uIПоискButton = this.UISmonitoringWindow.UICapCustom.UIПоискButton;
            #endregion

            // Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
            ApplicationUnderTest uISmonitoringWindow = ApplicationUnderTest.Launch(this.FoundTVShowParams.UISmonitoringWindowExePath, this.FoundTVShowParams.UISmonitoringWindowAlternateExePath);

            // Щелкните "TbSearch" надпись
            Mouse.Click(uITbSearchEdit, new Point(281, 20));

            // Тип "Побег из Шоушенка" в "TbSearch" надпись
            uITbSearchEdit.Text = this.FoundTVShowParams.UITbSearchEditText;

            // Щелкните "Поиск!" кнопка
            Mouse.Click(uIПоискButton, new Point(55, 18));
        }
        
        /// <summary>
        /// LoginUser_FoundTVShow_AddToFavorites - Используйте "LoginUser_FoundTVShow_AddToFavoritesParams" для передачи параметров в этот метод.
        /// </summary>
        public void LoginUser_FoundTVShow_AddToFavorites()
        {
            #region Variable Declarations
            WpfButton uIВходButton = this.UISmonitoringWindow.UICapCustom.UIВходButton;
            WpfEdit uITbLoginEdit = this.UISmonitoringWindow.UITVShowControlCustom.UIUserControlCustom.UITbLoginEdit;
            WpfEdit uIPasswordEdit = this.UISmonitoringWindow.UITVShowControlCustom.UIUserControlCustom.UIPasswordEdit;
            WpfButton uIВойтиButton = this.UISmonitoringWindow.UITVShowControlCustom.UIUserControlCustom.UIВойтиButton;
            #endregion

            // Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
            ApplicationUnderTest tVShowsApplication = ApplicationUnderTest.Launch(this.LoginUser_FoundTVShow_AddToFavoritesParams.ExePath, this.LoginUser_FoundTVShow_AddToFavoritesParams.AlternateExePath);

            // Щелкните "Вход" кнопка
            Mouse.Click(uIВходButton, new Point(23, 1));

            // Тип "gerik" в "TbLogin" надпись
            uITbLoginEdit.Text = this.LoginUser_FoundTVShow_AddToFavoritesParams.UITbLoginEditText;

            // Щелкните "Password" надпись
            Mouse.Click(uIPasswordEdit, new Point(91, 10));

            // Тип "********" в "Password" надпись
            Keyboard.SendKeys(uIPasswordEdit, this.LoginUser_FoundTVShow_AddToFavoritesParams.UIPasswordEditSendKeys, true);

            // Щелкните "Войти" кнопка
            Mouse.Click(uIВойтиButton, new Point(107, 16));
        }
        
        /// <summary>
        /// RunApplication - Используйте "RunApplicationParams" для передачи параметров в этот метод.
        /// </summary>
        public void RunApplication()
        {

            // Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
            ApplicationUnderTest tVShowsApplication = ApplicationUnderTest.Launch(this.RunApplicationParams.ExePath, this.RunApplicationParams.AlternateExePath);
        }
        
        #region Properties
        public virtual AdminLoginTestParams AdminLoginTestParams
        {
            get
            {
                if ((this.mAdminLoginTestParams == null))
                {
                    this.mAdminLoginTestParams = new AdminLoginTestParams();
                }
                return this.mAdminLoginTestParams;
            }
        }
        
        public virtual AssertIsDisabledBtnFavoritesExpectedValues AssertIsDisabledBtnFavoritesExpectedValues
        {
            get
            {
                if ((this.mAssertIsDisabledBtnFavoritesExpectedValues == null))
                {
                    this.mAssertIsDisabledBtnFavoritesExpectedValues = new AssertIsDisabledBtnFavoritesExpectedValues();
                }
                return this.mAssertIsDisabledBtnFavoritesExpectedValues;
            }
        }
        
        public virtual AssertIsEnabledBtnFavoritesExpectedValues AssertIsEnabledBtnFavoritesExpectedValues
        {
            get
            {
                if ((this.mAssertIsEnabledBtnFavoritesExpectedValues == null))
                {
                    this.mAssertIsEnabledBtnFavoritesExpectedValues = new AssertIsEnabledBtnFavoritesExpectedValues();
                }
                return this.mAssertIsEnabledBtnFavoritesExpectedValues;
            }
        }
        
        public virtual AssertNameTVShow_EqualExpectedValues AssertNameTVShow_EqualExpectedValues
        {
            get
            {
                if ((this.mAssertNameTVShow_EqualExpectedValues == null))
                {
                    this.mAssertNameTVShow_EqualExpectedValues = new AssertNameTVShow_EqualExpectedValues();
                }
                return this.mAssertNameTVShow_EqualExpectedValues;
            }
        }
        
        public virtual AssertTextBox_Equal_AdminExpectedValues AssertTextBox_Equal_AdminExpectedValues
        {
            get
            {
                if ((this.mAssertTextBox_Equal_AdminExpectedValues == null))
                {
                    this.mAssertTextBox_Equal_AdminExpectedValues = new AssertTextBox_Equal_AdminExpectedValues();
                }
                return this.mAssertTextBox_Equal_AdminExpectedValues;
            }
        }
        
        public virtual FoundTVShowParams FoundTVShowParams
        {
            get
            {
                if ((this.mFoundTVShowParams == null))
                {
                    this.mFoundTVShowParams = new FoundTVShowParams();
                }
                return this.mFoundTVShowParams;
            }
        }
        
        public virtual LoginUser_FoundTVShow_AddToFavoritesParams LoginUser_FoundTVShow_AddToFavoritesParams
        {
            get
            {
                if ((this.mLoginUser_FoundTVShow_AddToFavoritesParams == null))
                {
                    this.mLoginUser_FoundTVShow_AddToFavoritesParams = new LoginUser_FoundTVShow_AddToFavoritesParams();
                }
                return this.mLoginUser_FoundTVShow_AddToFavoritesParams;
            }
        }
        
        public virtual RunApplicationParams RunApplicationParams
        {
            get
            {
                if ((this.mRunApplicationParams == null))
                {
                    this.mRunApplicationParams = new RunApplicationParams();
                }
                return this.mRunApplicationParams;
            }
        }
        
        public UISmonitoringWindow UISmonitoringWindow
        {
            get
            {
                if ((this.mUISmonitoringWindow == null))
                {
                    this.mUISmonitoringWindow = new UISmonitoringWindow();
                }
                return this.mUISmonitoringWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private AdminLoginTestParams mAdminLoginTestParams;
        
        private AssertIsDisabledBtnFavoritesExpectedValues mAssertIsDisabledBtnFavoritesExpectedValues;
        
        private AssertIsEnabledBtnFavoritesExpectedValues mAssertIsEnabledBtnFavoritesExpectedValues;
        
        private AssertNameTVShow_EqualExpectedValues mAssertNameTVShow_EqualExpectedValues;
        
        private AssertTextBox_Equal_AdminExpectedValues mAssertTextBox_Equal_AdminExpectedValues;
        
        private FoundTVShowParams mFoundTVShowParams;
        
        private LoginUser_FoundTVShow_AddToFavoritesParams mLoginUser_FoundTVShow_AddToFavoritesParams;
        
        private RunApplicationParams mRunApplicationParams;
        
        private UISmonitoringWindow mUISmonitoringWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AdminLoginTest"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AdminLoginTestParams
    {
        
        #region Fields
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string UISmonitoringWindowExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string UISmonitoringWindowAlternateExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Тип "a" в "TbLogin" надпись
        /// </summary>
        public string UITbLoginEditText = "a";
        
        /// <summary>
        /// Тип "********" в "Password" надпись
        /// </summary>
        public string UIPasswordEditSendKeys = "GY/4yFKgxsVCEilbOvhsUw==";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertIsDisabledBtnFavorites"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AssertIsDisabledBtnFavoritesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Избранное" кнопка равняется "False"
        /// </summary>
        public bool UIИзбранноеButtonEnabled = false;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertIsEnabledBtnFavorites"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AssertIsEnabledBtnFavoritesExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство Enabled "Избранное" кнопка равняется "True"
        /// </summary>
        public bool UIИзбранноеButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertNameTVShow_Equal"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AssertNameTVShow_EqualExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Подождите 1 сек. для задержки между действиями пользователя; Убедитесь, что свойство DisplayText "Укрощение строптивого" надпись равняется "Побег из Шоушенка"
        /// </summary>
        public string UIУкрощениестроптивогоTextDisplayText = "Побег из Шоушенка";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "AssertTextBox_Equal_Admin"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class AssertTextBox_Equal_AdminExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Убедитесь, что свойство DisplayText "ADMIN: a" надпись равняется "ADMIN: a"
        /// </summary>
        public string UIADMINaTextDisplayText = "ADMIN: a";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "FoundTVShow"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class FoundTVShowParams
    {
        
        #region Fields
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string UISmonitoringWindowExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string UISmonitoringWindowAlternateExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Тип "Побег из Шоушенка" в "TbSearch" надпись
        /// </summary>
        public string UITbSearchEditText = "Побег из Шоушенка";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "LoginUser_FoundTVShow_AddToFavorites"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class LoginUser_FoundTVShow_AddToFavoritesParams
    {
        
        #region Fields
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string ExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string AlternateExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Тип "gerik" в "TbLogin" надпись
        /// </summary>
        public string UITbLoginEditText = "gerik";
        
        /// <summary>
        /// Тип "********" в "Password" надпись
        /// </summary>
        public string UIPasswordEditSendKeys = "v1AqnvyBtmLy7fTioj/ZXerj3Q6Jehh2";
        #endregion
    }
    
    /// <summary>
    /// Параметры для передачи в "RunApplication"
    /// </summary>
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class RunApplicationParams
    {
        
        #region Fields
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string ExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        
        /// <summary>
        /// Запуск "E:\Desktop\TVShows\TVShows\bin\Debug\TVShows.exe"
        /// </summary>
        public string AlternateExePath = "E:\\Desktop\\TVShows\\TVShows\\bin\\Debug\\TVShows.exe";
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UISmonitoringWindow : WpfWindow
    {
        
        public UISmonitoringWindow()
        {
            #region Условия поиска
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Smonitoring";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Smonitoring");
            #endregion
        }
        
        #region Properties
        public UICapCustom UICapCustom
        {
            get
            {
                if ((this.mUICapCustom == null))
                {
                    this.mUICapCustom = new UICapCustom(this);
                }
                return this.mUICapCustom;
            }
        }
        
        public UITVShowControlCustom UITVShowControlCustom
        {
            get
            {
                if ((this.mUITVShowControlCustom == null))
                {
                    this.mUITVShowControlCustom = new UITVShowControlCustom(this);
                }
                return this.mUITVShowControlCustom;
            }
        }
        
        public UIPageTransitionControCustom UIPageTransitionControCustom
        {
            get
            {
                if ((this.mUIPageTransitionControCustom == null))
                {
                    this.mUIPageTransitionControCustom = new UIPageTransitionControCustom(this);
                }
                return this.mUIPageTransitionControCustom;
            }
        }
        
        public WpfTitleBar UISmonitoringTitleBar
        {
            get
            {
                if ((this.mUISmonitoringTitleBar == null))
                {
                    this.mUISmonitoringTitleBar = new WpfTitleBar(this);
                    #region Условия поиска
                    this.mUISmonitoringTitleBar.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
                    this.mUISmonitoringTitleBar.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUISmonitoringTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UICapCustom mUICapCustom;
        
        private UITVShowControlCustom mUITVShowControlCustom;
        
        private UIPageTransitionControCustom mUIPageTransitionControCustom;
        
        private WpfTitleBar mUISmonitoringTitleBar;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UICapCustom : WpfCustom
    {
        
        public UICapCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.Cap";
            this.SearchProperties["AutomationId"] = "Cap";
            this.WindowTitles.Add("Smonitoring");
            #endregion
        }
        
        #region Properties
        public WpfButton UIВходButton
        {
            get
            {
                if ((this.mUIВходButton == null))
                {
                    this.mUIВходButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIВходButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnLogin";
                    this.mUIВходButton.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIВходButton;
            }
        }
        
        public WpfText UIADMINaText
        {
            get
            {
                if ((this.mUIADMINaText == null))
                {
                    this.mUIADMINaText = new WpfText(this);
                    #region Условия поиска
                    this.mUIADMINaText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TbLogin";
                    this.mUIADMINaText.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIADMINaText;
            }
        }
        
        public WpfEdit UITbSearchEdit
        {
            get
            {
                if ((this.mUITbSearchEdit == null))
                {
                    this.mUITbSearchEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUITbSearchEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TbSearch";
                    this.mUITbSearchEdit.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUITbSearchEdit;
            }
        }
        
        public WpfButton UIПоискButton
        {
            get
            {
                if ((this.mUIПоискButton == null))
                {
                    this.mUIПоискButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIПоискButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnSearch";
                    this.mUIПоискButton.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIПоискButton;
            }
        }
        
        public WpfButton UIИзбранноеButton
        {
            get
            {
                if ((this.mUIИзбранноеButton == null))
                {
                    this.mUIИзбранноеButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIИзбранноеButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnFavorites";
                    this.mUIИзбранноеButton.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIИзбранноеButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIВходButton;
        
        private WpfText mUIADMINaText;
        
        private WpfEdit mUITbSearchEdit;
        
        private WpfButton mUIПоискButton;
        
        private WpfButton mUIИзбранноеButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UITVShowControlCustom : WpfCustom
    {
        
        public UITVShowControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.TVShowControl";
            this.SearchProperties["AutomationId"] = "TVShowControl";
            this.WindowTitles.Add("Smonitoring");
            #endregion
        }
        
        #region Properties
        public UIUserControlCustom UIUserControlCustom
        {
            get
            {
                if ((this.mUIUserControlCustom == null))
                {
                    this.mUIUserControlCustom = new UIUserControlCustom(this);
                }
                return this.mUIUserControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUserControlCustom mUIUserControlCustom;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIUserControlCustom : WpfCustom
    {
        
        public UIUserControlCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.AutorisationContol";
            this.SearchProperties["AutomationId"] = "UserControl";
            this.WindowTitles.Add("Smonitoring");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITbLoginEdit
        {
            get
            {
                if ((this.mUITbLoginEdit == null))
                {
                    this.mUITbLoginEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUITbLoginEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TbLogin";
                    this.mUITbLoginEdit.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUITbLoginEdit;
            }
        }
        
        public WpfEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WpfEdit(this);
                    #region Условия поиска
                    this.mUIPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Password";
                    this.mUIPasswordEdit.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public WpfButton UIВойтиButton
        {
            get
            {
                if ((this.mUIВойтиButton == null))
                {
                    this.mUIВойтиButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIВойтиButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "BtnLogin";
                    this.mUIВойтиButton.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIВойтиButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITbLoginEdit;
        
        private WpfEdit mUIPasswordEdit;
        
        private WpfButton mUIВойтиButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIPageTransitionControCustom : WpfCustom
    {
        
        public UIPageTransitionControCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.PageTransition";
            this.SearchProperties["AutomationId"] = "PageTransitionControl";
            this.WindowTitles.Add("Smonitoring");
            #endregion
        }
        
        #region Properties
        public UIUserControlCustom1 UIUserControlCustom
        {
            get
            {
                if ((this.mUIUserControlCustom == null))
                {
                    this.mUIUserControlCustom = new UIUserControlCustom1(this);
                }
                return this.mUIUserControlCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIUserControlCustom1 mUIUserControlCustom;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIUserControlCustom1 : WpfCustom
    {
        
        public UIUserControlCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.TVDockPanelControl";
            this.SearchProperties["AutomationId"] = "UserControl";
            this.WindowTitles.Add("Smonitoring");
            #endregion
        }
        
        #region Properties
        public WpfText UIУкрощениестроптивогоText
        {
            get
            {
                if ((this.mUIУкрощениестроптивогоText == null))
                {
                    this.mUIУкрощениестроптивогоText = new WpfText(this);
                    #region Условия поиска
                    this.mUIУкрощениестроптивогоText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TbName";
                    this.mUIУкрощениестроптивогоText.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIУкрощениестроптивогоText;
            }
        }
        
        public WpfButton UIStarButton
        {
            get
            {
                if ((this.mUIStarButton == null))
                {
                    this.mUIStarButton = new WpfButton(this);
                    #region Условия поиска
                    this.mUIStarButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Star";
                    this.mUIStarButton.WindowTitles.Add("Smonitoring");
                    #endregion
                }
                return this.mUIStarButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIУкрощениестроптивогоText;
        
        private WpfButton mUIStarButton;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Условия поиска
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Рабочий стол";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Построитель кодированных тестов ИП", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Условия поиска
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIРабочийстолClient
        {
            get
            {
                if ((this.mUIРабочийстолClient == null))
                {
                    this.mUIРабочийстолClient = new WinClient(this);
                }
                return this.mUIРабочийстолClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIРабочийстолClient;
        #endregion
    }
}
